# GhostLink NGINX Configuration for glink.cktechx.com
# Designed for Docker deployment with OIDC authentication

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=websocket:10m rate=10r/s;

# Upstream backend servers
upstream ghostlink_backend {
    server ghostlink:3000;
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name glink.cktechx.com;
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server block
server {
    listen 443 ssl http2;
    server_name glink.cktechx.com;

    # SSL Configuration
    ssl_certificate /etc/nginx/certs/cktechx.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/cktechx.com/privkey.pem;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/certs/cktechx.com/chain.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self' wss: ws:; media-src 'self'; object-src 'none'; frame-ancestors 'none';" always;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Proxy settings for backend communication
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Health check endpoint (no auth required)
    location /api/health {
        proxy_pass http://ghostlink_backend;
        access_log off;
    }

    # NGINX auth endpoint for OIDC authentication
    location /api/auth/nginx {
        internal;
        proxy_pass http://ghostlink_backend;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
    }

    # Public authentication endpoints (no auth required)
    location ~ ^/api/auth/(login|callback|logout)$ {
        limit_req zone=auth burst=10 nodelay;
        proxy_pass http://ghostlink_backend;
    }

    # WebSocket endpoints with authentication
    location ~ ^/(api/ws|api/terminal/.+/ws|api/direct/relay/ws)$ {
        # Authenticate first
        auth_request /api/auth/nginx;
        
        # Forward auth headers
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_roles $upstream_http_x_auth_roles;
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Roles $auth_roles;
        
        # WebSocket specific settings
        proxy_pass http://ghostlink_backend;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Disable buffering for real-time communication
        proxy_buffering off;
        proxy_cache off;
        
        # Longer timeouts for WebSocket connections
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Rate limiting for WebSocket connections
        limit_req zone=websocket burst=5 nodelay;
    }

    # Static assets (served directly by NGINX)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://ghostlink_backend;
        
        # Caching for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Enable compression for static assets
        gzip_static on;
    }

    # API endpoints with authentication and rate limiting
    location /api/ {
        # Authenticate first
        auth_request /api/auth/nginx;
        
        # Forward auth headers
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_roles $upstream_http_x_auth_roles;
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Roles $auth_roles;
        
        # Rate limiting
        limit_req zone=api burst=50 nodelay;
        
        # Proxy to backend
        proxy_pass http://ghostlink_backend;
        
        # API specific headers
        add_header X-API-Version "1.0" always;
    }

    # File uploads (toolbox, custom tools, etc.)
    location ~ ^/api/(toolbox/upload|terminal/.+/upload)$ {
        # Authenticate first
        auth_request /api/auth/nginx;
        
        # Forward auth headers
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_roles $upstream_http_x_auth_roles;
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Roles $auth_roles;
        
        # Special settings for file uploads
        client_max_body_size 1G;
        client_body_timeout 300s;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # Disable buffering for large uploads
        proxy_request_buffering off;
        
        proxy_pass http://ghostlink_backend;
    }

    # Admin-only endpoints (require admin role)
    location ~ ^/api/(pam|toolbox/(tools|execute)|branding/config)$ {
        # Authenticate first
        auth_request /api/auth/nginx;
        
        # Forward auth headers
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_roles $upstream_http_x_auth_roles;
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Roles $auth_roles;
        
        # Additional check for admin role (could be implemented in backend)
        # For now, rely on backend to check roles
        
        proxy_pass http://ghostlink_backend;
    }

    # Relay endpoints for client connections (different auth/rate limiting)
    location /relay/ {
        # Different rate limiting for client connections
        limit_req zone=api burst=20 nodelay;
        
        # Strip /relay prefix
        rewrite ^/relay/(.*)$ /$1 break;
        
        proxy_pass http://ghostlink_backend;
        
        # Longer timeouts for client connections
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }

    # Web GUI (Leptos frontend) - catch-all for SPA routing
    location / {
        # Authenticate first
        auth_request /api/auth/nginx;
        
        # Forward auth headers
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_roles $upstream_http_x_auth_roles;
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Roles $auth_roles;
        
        # Handle auth errors
        error_page 401 = @auth_redirect;
        error_page 403 = @access_denied;
        
        proxy_pass http://ghostlink_backend;
        
        # SPA fallback
        try_files $uri $uri/ @fallback;
    }

    # Fallback for SPA routing
    location @fallback {
        proxy_pass http://ghostlink_backend;
    }

    # Auth redirect handler
    location @auth_redirect {
        return 302 https://$server_name/api/auth/login?redirect_uri=$scheme://$server_name$request_uri;
    }

    # Access denied handler
    location @access_denied {
        return 403 "Access denied. Insufficient permissions.";
        add_header Content-Type text/plain always;
    }

    # Security: Block access to sensitive files
    location ~ /\.(ht|svn|git|hg|bzr) {
        deny all;
        return 404;
    }

    # Security: Block access to backup and temporary files
    location ~ \.(bak|backup|old|orig|save|tmp)$ {
        deny all;
        return 404;
    }

    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }
}
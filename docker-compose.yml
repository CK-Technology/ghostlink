version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ghostlink-db
    environment:
      POSTGRES_DB: ghostlink
      POSTGRES_USER: ghostlink
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ghostlink"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GhostLink Server
  ghostlink:
    build: .
    container_name: ghostlink-server
    environment:
      GHOSTLINK_DATABASE__URL: "postgresql://ghostlink:${DB_PASSWORD:-changeme}@postgres:5432/ghostlink"
      GHOSTLINK_SERVER__HOST: "0.0.0.0"
      GHOSTLINK_SERVER__PORT: "8080"
      GHOSTLINK_SECURITY__JWT_SECRET: "${JWT_SECRET:-your-super-secret-jwt-key}"
      GHOSTLINK_LOGGING__LEVEL: "${LOG_LEVEL:-info}"
    volumes:
      - ./web:/app/web:ro
      - ./logs:/app/logs
      - ./config.toml:/app/config.toml:ro
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: ghostlink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ghostlink.conf:/etc/nginx/conf.d/ghostlink.conf:ro
      - ./nginx/ghostlink-common.conf:/etc/nginx/conf.d/ghostlink-common.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates if using HTTPS
    depends_on:
      - ghostlink
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: ghostlink-network

# GhostLink Nginx Configuration
# 10x better than RustDesk's basic setup with enterprise-grade reverse proxy

# Rate limiting for security
limit_req_zone $binary_remote_addr zone=ghostlink_api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=ghostlink_ws:10m rate=5r/s;
limit_conn_zone $binary_remote_addr zone=ghostlink_conn:10m;

# WebSocket connection upgrading
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Geographic load balancing (better than RustDesk)
geo $closest_region {
    default us-east;
    
    # North America
    0.0.0.0/8     us-west;
    24.0.0.0/8    us-east;
    50.0.0.0/8    us-east;
    
    # Europe
    80.0.0.0/4    eu-central;
    90.0.0.0/8    eu-central;
    
    # Asia Pacific
    110.0.0.0/8   ap-southeast;
    120.0.0.0/8   ap-southeast;
}

# Upstream servers for load balancing
upstream ghostlink_api {
    least_conn;
    server ghostlink-server-1:8080 weight=3 max_fails=3 fail_timeout=30s;
    server ghostlink-server-2:8080 weight=3 max_fails=3 fail_timeout=30s;
    server ghostlink-server-3:8080 weight=2 max_fails=3 fail_timeout=30s backup;
    
    # Health checks
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

upstream ghostlink_relay {
    ip_hash; # Sticky sessions for relay connections
    server ghostlink-relay-1:8081 weight=5 max_fails=2 fail_timeout=10s;
    server ghostlink-relay-2:8081 weight=5 max_fails=2 fail_timeout=10s;
    server ghostlink-relay-3:8081 weight=3 max_fails=2 fail_timeout=10s;
    
    keepalive 64;
}

upstream ghostlink_rendezvous {
    least_conn;
    server ghostlink-rendezvous-1:8082 weight=1;
    server ghostlink-rendezvous-2:8082 weight=1;
    
    keepalive 16;
}

# SSL/TLS configuration (enterprise-grade security)
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_stapling on;
ssl_stapling_verify on;

# Main server block
server {
    listen 80;
    listen [::]:80;
    server_name *.ghostlink.com ghostlink.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name *.ghostlink.com ghostlink.com;
    
    # SSL certificates (Let's Encrypt or custom)
    ssl_certificate /etc/ssl/certs/ghostlink.com.crt;
    ssl_certificate_key /etc/ssl/private/ghostlink.com.key;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: ws:; font-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';" always;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/wasm;
    
    # Rate limiting
    limit_req zone=ghostlink_api burst=20 nodelay;
    limit_conn ghostlink_conn 10;
    
    # Client settings
    client_max_body_size 100M; # For file uploads
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 65s;
    
    # Main web application (Leptos frontend)
    location / {
        root /var/www/ghostlink;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # WASM files
        location ~* \.wasm$ {
            add_header Content-Type "application/wasm";
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # API endpoints
    location /api/ {
        limit_req zone=ghostlink_api burst=30 nodelay;
        
        proxy_pass http://ghostlink_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Health check bypass
        location /api/health {
            access_log off;
            proxy_pass http://ghostlink_api;
        }
    }
    
    # WebSocket relay connections (ScreenConnect-style)
    location /ws/ {
        limit_req zone=ghostlink_ws burst=10 nodelay;
        
        proxy_pass http://ghostlink_relay;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # No buffering for real-time communication
        proxy_buffering off;
        proxy_cache off;
        
        # Keep connections alive
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
    }
    
    # Client download endpoints
    location /download/ {
        alias /var/www/ghostlink/downloads/;
        
        # Auto-detect client platform and serve appropriate binary
        location /download/client {
            # User-Agent based detection (10x better than RustDesk)
            if ($http_user_agent ~* "Windows") {
                rewrite ^/download/client$ /download/ghostlink-client-windows.exe last;
            }
            if ($http_user_agent ~* "Linux") {
                rewrite ^/download/client$ /download/ghostlink-client-linux last;
            }
            if ($http_user_agent ~* "Mac") {
                rewrite ^/download/client$ /download/ghostlink-client-macos last;
            }
            
            # Default to universal installer
            rewrite ^/download/client$ /download/ghostlink-installer.sh last;
        }
        
        # Set appropriate headers for downloads
        add_header Content-Disposition "attachment";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # Rendezvous server (UDP over WebSocket for NAT traversal)
    location /rendezvous/ {
        proxy_pass http://ghostlink_rendezvous;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Rendezvous specific settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering off;
    }
    
    # GraphQL endpoint for enterprise features
    location /graphql {
        limit_req zone=ghostlink_api burst=20 nodelay;
        
        proxy_pass http://ghostlink_api/graphql;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # GraphQL specific settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }
    
    # Admin panel (restricted access)
    location /admin/ {
        # IP whitelist for admin access
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://ghostlink_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Metrics and monitoring
    location /metrics {
        # Prometheus metrics endpoint
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://ghostlink_api/metrics;
        access_log off;
    }
    
    # File upload endpoint with progress tracking
    location /upload {
        limit_req zone=ghostlink_api burst=5 nodelay;
        client_max_body_size 1G;
        
        # Upload progress tracking
        upload_progress uploads 1m;
        
        proxy_pass http://ghostlink_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Extended timeouts for large uploads
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Upload progress endpoint
    location ^~ /progress {
        report_uploads uploads;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/ghostlink/errors;
        internal;
    }
    
    location = /50x.html {
        root /var/www/ghostlink/errors;
        internal;
    }
}

# UDP relay server for RustDesk-style P2P (better implementation)
stream {
    upstream ghostlink_udp_relay {
        server ghostlink-relay-1:21116;
        server ghostlink-relay-2:21116;
    }
    
    server {
        listen 21116 udp;
        proxy_pass ghostlink_udp_relay;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/ghostlink_udp.log;
    }
}

# Logging configuration
log_format ghostlink_access '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            '"$http_x_forwarded_for" '
                            'rt=$request_time uct="$upstream_connect_time" '
                            'uht="$upstream_header_time" urt="$upstream_response_time"';

access_log /var/log/nginx/ghostlink_access.log ghostlink_access;
error_log /var/log/nginx/ghostlink_error.log warn;